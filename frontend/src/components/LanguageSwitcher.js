import React, { useState, useEffect } from 'react';
import './LanguageSwitcher.css';

const LanguageSwitcher = () => {
    const [currentLanguage, setCurrentLanguage] = useState('ru');

    useEffect(() => {
        const savedLanguage = localStorage.getItem('language') || 'ru';
        console.log('LanguageSwitcher - Saved language:', savedLanguage);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        if (!localStorage.getItem('language')) {
            localStorage.setItem('language', 'ru');
        }
        
        setCurrentLanguage(savedLanguage);
        console.log('LanguageSwitcher - Current language set to:', savedLanguage);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        window.dispatchEvent(new CustomEvent('languageChanged', { detail: savedLanguage }));
    }, []);

    const changeLanguage = (language) => {
        console.log('LanguageSwitcher - Changing language to:', language);
        setCurrentLanguage(language);
        localStorage.setItem('language', language);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        window.dispatchEvent(new CustomEvent('languageChanged', { detail: language }));
    };

    return (
        <div className="language-switcher">
            <button 
                className={`lang-btn ${currentLanguage === 'ru' ? 'active' : ''}`}
                onClick={() => changeLanguage('ru')}
            >
                üá∑üá∫ –†–£–°
            </button>
            <button 
                className={`lang-btn ${currentLanguage === 'en' ? 'active' : ''}`}
                onClick={() => changeLanguage('en')}
            >
                üá∫üá∏ ENG
            </button>
        </div>
    );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const useTranslations = () => {
    const [language, setLanguage] = useState('ru');
    
    useEffect(() => {
        const savedLanguage = localStorage.getItem('language') || 'ru';
        console.log('useTranslations - Saved language from localStorage:', savedLanguage);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        if (!localStorage.getItem('language')) {
            localStorage.setItem('language', 'ru');
        }
        
        setLanguage(savedLanguage);
        console.log('useTranslations - Current language set to:', savedLanguage);

        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
        const handleLanguageChange = (event) => {
            console.log('useTranslations - Language changed to:', event.detail);
            setLanguage(event.detail);
        };

        window.addEventListener('languageChanged', handleLanguageChange);
        
        return () => {
            window.removeEventListener('languageChanged', handleLanguageChange);
        };
    }, []);

    const interfaceTranslations = {
        ru: {
            catalog: '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤',
            cart: '–ö–æ—Ä–∑–∏–Ω–∞',
            addToCart: '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É',
            placeOrder: '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
            about: '–û –∫–æ–º–ø–∞–Ω–∏–∏',
            contact: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
            login: '–í–æ–π—Ç–∏',
            register: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
            search: '–ü–æ–∏—Å–∫...',
            price: '–¶–µ–Ω–∞',
            inStock: '–í –Ω–∞–ª–∏—á–∏–∏',
            outOfStock: '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏',
            total: '–ò—Ç–æ–≥–æ',
            quantity: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            description: '–û–ø–∏—Å–∞–Ω–∏–µ',
            category: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            manufacturer: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å',
            home: '–ì–ª–∞–≤–Ω–∞—è',
            categories: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
            allProducts: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã',
            allCategories: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            allManufacturers: '–í—Å–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏',
            noProductsFound: '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
            loading: '–ó–∞–≥—Ä—É–∑–∫–∞...',
            error: '–û—à–∏–±–∫–∞',
            addedToCart: '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!',
            emptyCart: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞',
            checkout: '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
            removeFromCart: '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'
        },
        en: {
            catalog: 'Product Catalog',
            cart: 'Cart',
            addToCart: 'Add to Cart',
            placeOrder: 'Place Order',
            about: 'About Company',
            contact: 'Contacts',
            login: 'Login',
            register: 'Register',
            search: 'Search...',
            price: 'Price',
            inStock: 'In Stock',
            outOfStock: 'Out of Stock',
            total: 'Total',
            quantity: 'Quantity',
            description: 'Description',
            category: 'Category',
            manufacturer: 'Manufacturer',
            home: 'Home',
            categories: 'Categories',
            allProducts: 'All Products',
            allCategories: 'All Categories',
            allManufacturers: 'All Manufacturers',
            noProductsFound: 'No products found',
            loading: 'Loading...',
            error: 'Error',
            addedToCart: 'Product added to cart!',
            emptyCart: 'Cart is empty',
            checkout: 'Checkout',
            removeFromCart: 'Remove from cart'
        }
    };

    return {
        language,
        t: interfaceTranslations[language] || interfaceTranslations.ru,
        setLanguage
    };
};

export default LanguageSwitcher; 